{
  "name": "Computer-database",
  "tagline": "",
  "body": "Computer-database project\r\n===========================  \r\n\r\n## Content\r\nThis project was made in order to training with plenty of concepts of computings, and some tools.\r\n\r\nThis project used :\r\n* Tomcat\r\n* Spring\r\n    * MVC\r\n    * Transaction\r\n    * Security (with login)\r\n    * WebServices with REST\r\n    * Localization i18n\r\n* Hibernate Validation\r\n* JPA and Hibernate (with Criteria)\r\n* Docker & docker Compose\r\n    * Dockerfile, dind, ...\r\n* Maven & organization with modules\r\n    * Maven configuration with rapports\r\n    * CheckStyle\r\n* Concepts of DAO, DTO, Services, Mappers, Paginator\r\n* Logs (LogBack)\r\n* JSPs, JSTL, and Tags\r\n* jQuery lib (jquery, jQuery UI, jQuery Validation)\r\n* Units Testing & Integration testing with Selenium\r\n* Continuous delivery (Jenkins)\r\n\r\n* Old concepts (in previous commits)\r\n    * Servlets\r\n    * JDBC\r\n    * ThreadLocal\r\n    * Singleton enum Pattern\r\n    * Connection Pool (today managed by Spring Datasource)\r\n    * Spring Security (authentication with Digest)\r\n\r\n## Utilisation\r\n\r\nFirst at all, be into the root folder of the project\r\n\r\nTo launch the test server :\r\n\r\n```bash\r\ndocker-compose -f dockers/docker-compose-envtest.yml up test_server\r\n```\r\n\r\nTo launch Unit tests :\r\n```bash\r\ndocker-compose -f dockers/docker-compose-envtest.yml up unit_test\r\n```\r\n\r\nTo launch Integration testing :\r\n```bash\r\ndocker-compose -f dockers/docker-compose-envtest.yml up selenium_test\r\n```\r\n\r\nTo launch Production Server :\r\n(if the docker is not build, you need to generate the war of the front-webapp project)\r\n```bash\r\ndocker-compose -f dockers/docker-compose-envtest.yml up tomcat_webapp\r\n```\r\n\r\nTo launch stress tests :\r\nTODO\r\n\r\n## Points to view\r\n#### 4.4.3 Glazer Container Agent\r\nThe Glazer Container Agent is a simple webapp that allow us to manage Docker containers.\r\n\r\nCreate a Docker container with a Glazer Container Agent. This container will be your staging server. Like the Jenkins container, this container must be able to start containers (Docker in Docker).\r\n\r\nCreate two Docker images: one for the computer database webapp and one for the mysql. Once again use docker-compose to describe your services. Push them to DockerHub.\r\n\r\nAdd another job in your Jenkins that updates the computer-database-webapp image with the latest successful war and pushes it to DockerHub. Then ask your Glazer Container Agent container to create a new container from the latest image. This job must be triggered only if the UT tests pass.\r\n\r\n#### 4.5.2. Point overview: Continuous Integration (t0 + 18 days)\r\nJenkins + DinD: Which service actually starts the containers ? How to share directories between containers ?  \r\nGlazer Container Agent + DinD: How to handle container port mapping ? (2 solutions)  \r\nDockerHub: Automated builds limitations ?\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}