version: '2'

services:

  bdd_h2:
    build:
      context: ..
      dockerfile: dockers/db/Dockerfile_h2
    image: vmickaelv/bdd_computer_database:h2

    networks:
      - back

    ports:
      - "8081:81"
      - "1521:1521"

  # Lance la BDD
  bdd_mysql:
    build:
      context: ..
      dockerfile: dockers/db/Dockerfile_mysql
    image: vmickaelv/bdd_computer_database:mysql
    networks:
      - back
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
    ports:
      - "3306:3306"

  bdd:
    extends: bdd_h2

  test_bdd:
    extends: bdd

  # Service mère pour les tests
  base_test:
    build:
      context: ..
      dockerfile: dockers/Dockerfile_java_maven
    volumes:
      - ~/.m2/repository:/root/.m2/repository

  # Lancement des tests unitaires
  unit_test:
    extends: base_test
    networks:
      - back
      - front
    depends_on:
      - bdd
    command:
      - "mvn"
      - "-P"
      - "docker"
      - "test"
      - "-Ddb.url=jdbc:h2:tcp://bdd:1521/~/test"

  # Lancement des tests fonctionnels
  selenium_test:
    extends: base_test
    networks:
      - front
      - back
    depends_on:
      - test_server
      - firefox
    command:
      - "mvn"
      - "test"
      - "-P"
      - "seleniumTest,docker"
      - "-Dserver.ip=docker"
      - "-Dserver.port=8080"
      - "-Dwebdriver.url=http://firefox:4444/wd/hub"
      - "-Ddb.url=jdbc:h2:tcp://bdd:1521/~/test"
      - "-DfailIfNoTests=false"
      - "-Dserver.applicationContext="

        # TODO Voir si sleep important ou pas
#       - "sh"
#       - "-c"
#       - "sleep 3 && mvn test -P seleniumTest -Dserver.ip=server -Dwebdriver.url=http://firefox:4444/wd/hub"

  # Lance le firefox Distant pour les tests fonctionnelles
  firefox:
    build:
      context: ..
      dockerfile: dockers/Dockerfile_selenium
    image: vmickaelv/firefox_standalone
    ports:
      - "4444:4444"
      - "5900:5900"
    networks:
      - front

  # Serveur de tests
  test_server:
    extends: base_test

    networks:
      - back
      - front

    ports:
      - "8888:8080"

    depends_on:
      - bdd

    command:
      - "mvn"
      - "-P"
      - "docker"
      - "-Ddb.username=sa"
      - "-Ddb.password="
      - "-Ddb.className=org.h2.Driver"
      - "-Ddb.url=jdbc:h2:tcp://bdd:1521/~/test"

      - "tomcat7:run"

  test_rest_server:
    extends: base_test

    networks:
      - back
      - front

    ports:
      - "8888:8888"

    depends_on:
      - bdd

    command:
      - "mvn"
      - "-P"
      - "docker"
      - "-pl"
      - "webapp-rest"
      - "-Ddb.min_size=25"

      - "-Ddb.username=sa"
      - "-Ddb.password="
      - "-Ddb.className=org.h2.Driver"
      - "-Ddb.url=jdbc:h2:tcp://bdd:1521/~/test"

      - "tomcat7:run"


  # TODO créer un service pour créer un serveur de production avec Tomcat
  tomcat_webapp:
    build:
      context: ..
      dockerfile: dockers/Dockerfile_tomcat_server

    ports:
      - "8888:8080"

    depends_on:
      - bdd

    networks:
      - back
      - front

networks:
  front:

  back: